package programming.set11.brownies;

/**
 * This class represents a HashMap.
 * 
 * @param <K> the key
 * @param <V> the value
 */
public class BrownieMap<K, V> {

	/**
	 * How many buckets there are.
	 */
	private int numberOfBuckets;

	/**
	 * Array that represents the map.
	 */
	private BrownieEntry<K, V>[] bucketArray;

	/**
	 * The capacity sets the length of the bucket array.
	 * 
	 * @param numberOfBuckets bucket array length
	 * @throws IllegalArgumentException if the number of buckets is smaller than
	 *                                  one.
	 */
	public BrownieMap(int numberOfBuckets) {
		if (numberOfBuckets < 1) {
			throw new IllegalArgumentException();
		}
		this.numberOfBuckets = numberOfBuckets;
		bucketArray = new BrownieEntry[numberOfBuckets];
	}

	/**
	 * Put an item into the map.
	 * 
	 * @param key   the key of the item.
	 * @param value the value of the item.
	 * @throws IllegalArgumentException if the key or the value is {@code null}.
	 */
	public void put(K key, V value) {
		if (key == null || value == null) {
			throw new IllegalArgumentException();
		}
		int bucket = Math.abs(key.hashCode()) % numberOfBuckets;
		BrownieEntry<K, V> entry = findEntry(bucketArray[bucket], key);
		if (entry == null) {
			entry = new BrownieEntry<K, V>(key, value);
			entry.setLink(bucketArray[bucket]);
			bucketArray[bucket] = entry;
		} else {
			entry.setValue(value);
		}
	}

	/**
	 * Returns the value of a given key.
	 * 
	 * @param key the key of the item.
	 * @return the value belonging to that key or {@code null} if no value is mapped
	 *         to that key.
	 * @throws IllegalArgumentException if the key is {@code null}.
	 */
	public V get(K key) {
		if (key == null) {
			throw new IllegalArgumentException();
		}
		int bucket = Math.abs(key.hashCode()) % numberOfBuckets;
		BrownieEntry<K, V> entry = findEntry(bucketArray[bucket], key);
		if (entry == null) {
			return null;
		} else {
			return entry.getValue();
		}

	}

	/**
	 * Removes one key and its value from the map. If the key does not exist in the
	 * map, nothing happens.
	 * 
	 * @param key the key.
	 * @throws IllegalArgumentException if the key is {@code null}.
	 */
	public void remove(K key) {
		if (key == null) {
			throw new IllegalArgumentException();
		}
		int bucket = Math.abs(key.hashCode()) % numberOfBuckets;

		BrownieEntry<K, V> entry = bucketArray[bucket];
		if (entry != null) {
			if (entry.getKey().equals(key)) {
				bucketArray[bucket] = entry.getLink();
			} else {
				while (entry.getLink() != null) {
					if (entry.getLink().getKey().equals(key)) {
						entry.setLink(entry.getLink().getLink());

					} else {
						entry = entry.getLink();
					}
				}
			}
		}

	}

	/**
	 * Clears the entire map.
	 */
	public void clear() {
		for (int i = 0; i < bucketArray.length; i++) {
			bucketArray[i] = null;

		}
	}

	/**
	 * This method finds the wanted entry.
	 * 
	 * @param entry which bucket to search
	 * @param key   what to locate in the chain
	 * @return the entry
	 */
	private BrownieEntry<K, V> findEntry(BrownieEntry<K, V> entry, K key) {
		while (entry != null) {
			if (entry.getKey().equals(key)) {
				return entry;
			}
			entry = entry.getLink();
		}
		return null;
	}
}

package programming.set11.brownies;

/**
 * This class represents the entry in the bucketArray.
 * 
 * @param <K> the key
 * @param <V> the value
 */
class BrownieEntry<K, V> {

	/**
	 * The key.
	 */
	private K key;

	/**
	 * The value.
	 */
	private V value;

	/**
	 * The link to the next entry.
	 */
	private BrownieEntry<K, V> link;

	/**
	 * Constructor for the entry.
	 * 
	 * @param key   the key
	 * @param value the value
	 */
	public BrownieEntry(K key, V value) {
		this.key = key;
		this.value = value;
	}

	/**
	 * getter-Method for the key.
	 * 
	 * @return the key
	 */
	public K getKey() {
		return key;
	}

	/**
	 * getter-method for the value.
	 * 
	 * @return the value
	 */
	public V getValue() {
		return value;
	}

	/**
	 * setter-method for the value.
	 * 
	 * @param value to set
	 */
	public void setValue(V value) {
		this.value = value;
	}

	/**
	 * getter-method for the link.
	 * 
	 * @return the link
	 */
	public BrownieEntry<K, V> getLink() {
		return link;
	}

	/**
	 * setter-method for the link.
	 * 
	 * @param link to set
	 */
	public void setLink(BrownieEntry<K, V> link) {
		this.link = link;
	}
}
